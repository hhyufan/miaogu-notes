{
  "0-开发环境准备.md": {
    "summary": "Java开发环境的安装配置，包括JDK安装、环境变量设置、IDE选择等基础准备工作",
    "keywords": [
      "JDK",
      "环境变量",
      "开发工具",
      "安装配置"
    ],
    "folder": "JavaFundamentals"
  },
  "1-IDEA开发与使用.md": {
    "summary": "IntelliJ IDEA开发工具的使用指南，包括项目创建、代码编写、调试技巧等",
    "keywords": [
      "IDEA",
      "项目管理",
      "代码编辑",
      "调试"
    ],
    "folder": "JavaFundamentals"
  },
  "2-编码规范.md": {
    "summary": "Java编程的代码规范和最佳实践，包括命名规则、代码格式、注释规范等",
    "keywords": [
      "编码规范",
      "命名规则",
      "代码格式",
      "最佳实践"
    ],
    "folder": "JavaFundamentals"
  },
  "3-变量和数据类型.md": {
    "summary": "Java中变量的声明、初始化以及各种数据类型的使用方法和特点",
    "keywords": [
      "变量",
      "数据类型",
      "基本类型",
      "引用类型"
    ],
    "folder": "JavaFundamentals"
  },
  "4-运算符.md": {
    "summary": "Java中各种运算符的使用，包括算术、关系、逻辑、位运算等操作符",
    "keywords": [
      "运算符",
      "算术运算",
      "逻辑运算",
      "位运算"
    ],
    "folder": "JavaFundamentals"
  },
  "5-流程控制语句.md": {
    "summary": "Java程序流程控制，包括条件语句、循环语句、跳转语句等控制结构",
    "keywords": [
      "流程控制",
      "条件语句",
      "循环",
      "分支结构"
    ],
    "folder": "JavaFundamentals"
  },
  "6-异常处理.md": {
    "summary": "Java异常处理机制详解，包括异常体系结构、错误分类、处理方式、自定义异常、调试技巧和最佳实践",
    "keywords": [
      "异常处理",
      "错误分类",
      "try-catch",
      "自定义异常",
      "调试",
      "最佳实践"
    ],
    "folder": "JavaFundamentals"
  },
  "7-数组.md": {
    "summary": "Java数组的声明、初始化、遍历和常用操作方法",
    "keywords": [
      "数组",
      "数组操作",
      "遍历",
      "多维数组"
    ],
    "folder": "JavaFundamentals"
  },
  "8-面向对象编程.md": {
    "summary": "Java面向对象编程核心概念，包括类、对象、继承、封装、多态等",
    "keywords": [
      "面向对象",
      "类和对象",
      "继承",
      "封装",
      "多态",
      "泛型"
    ],
    "folder": "JavaFundamentals"
  },
  "9-常用API.md": {
    "summary": "Java常用API的介绍和使用方法，包括字符串、集合、IO等核心类库",
    "keywords": [
      "API",
      "字符串",
      "集合",
      "IO操作"
    ],
    "folder": "JavaFundamentals"
  },
  "10-集合.md": {
    "summary": "Java集合框架详解，包括Collection接口、List、Set、Map等核心接口及其实现类的使用方法",
    "keywords": [
      "集合框架",
      "ArrayList",
      "HashMap",
      "Iterator"
    ],
    "folder": "JavaFundamentals"
  },
  "11-函数式编程.md": {
    "summary": "Java 8引入的函数式编程特性，包括Lambda表达式、Stream API、方法引用等现代编程范式",
    "keywords": [
      "Lambda表达式",
      "Stream API",
      "方法引用",
      "函数式接口"
    ],
    "folder": "JavaFundamentals"
  },
  "12-文件IO.md": {
    "summary": "Java文件输入输出操作详解，包括File类的使用、文件和目录操作、路径处理、文件过滤等核心功能",
    "keywords": [
      "文件IO",
      "File类",
      "文件操作",
      "目录操作",
      "路径处理",
      "文件过滤"
    ],
    "folder": "JavaFundamentals"
  },
  "13-并发.md": {
    "summary": "Java并发编程全面详解，涵盖多线程基础、异步编程、线程安全、线程池、锁机制、并发工具类等核心并发知识",
    "keywords": [
      "多线程",
      "异步编程",
      "线程安全",
      "线程池",
      "锁机制",
      "并发工具",
      "同步控制",
      "原子操作",
      "阻塞队列",
      "并发集合"
    ],
    "folder": "JavaFundamentals"
  },
  "1-基础语法.md": {
    "summary": "Kotlin编程语言的基础语法，包括变量声明、数据类型、控制流程等核心概念",
    "keywords": [
      "基础语法",
      "变量声明",
      "数据类型",
      "控制流程"
    ],
    "folder": "KotlinEssentials"
  },
  "2-面向对象.md": {
    "summary": "Kotlin中的面向对象编程，包括类、对象、继承、封装等OOP核心概念",
    "keywords": [
      "面向对象",
      "类和对象",
      "继承",
      "封装"
    ],
    "folder": "KotlinEssentials"
  },
  "3-ADT和模式匹配.md": {
    "summary": "Kotlin中的代数数据类型(ADT)和模式匹配，包括sealed类、when表达式等高级特性",
    "keywords": [
      "ADT",
      "模式匹配",
      "sealed类",
      "when表达式"
    ],
    "folder": "KotlinEssentials"
  },
  "4-类型系统.md": {
    "summary": "Kotlin强大的类型系统，包括空安全、泛型、类型推断等特性",
    "keywords": [
      "类型系统",
      "空安全",
      "泛型",
      "类型推断"
    ],
    "folder": "KotlinEssentials"
  },
  "5-Lambda和集合.md": {
    "summary": "Kotlin中的Lambda表达式和集合操作，包括高阶函数、集合API等函数式编程特性",
    "keywords": [
      "Lambda表达式",
      "集合操作",
      "高阶函数",
      "函数式编程"
    ],
    "folder": "KotlinEssentials"
  },
  "6-多态和扩展.md": {
    "summary": "Kotlin中的多态性和扩展功能，包括接口、抽象类、扩展函数等高级特性",
    "keywords": [
      "多态",
      "扩展函数",
      "接口",
      "抽象类"
    ],
    "folder": "KotlinEssentials"
  },
  "7-设计模式.md": {
    "summary": "在Kotlin中实现常见的设计模式，包括单例、工厂、观察者等经典模式",
    "keywords": [
      "设计模式",
      "单例模式",
      "工厂模式",
      "观察者模式"
    ],
    "folder": "KotlinEssentials"
  },
  "01-单例模式.md": {
    "summary": "单例模式的实现方式和应用场景，确保一个类只有一个实例",
    "keywords": [
      "单例模式",
      "设计模式",
      "创建型模式",
      "实例控制"
    ],
    "folder": "DesignPattern"
  },
  "02-工厂方法模式.md": {
    "summary": "工厂方法模式的实现和应用，通过工厂方法创建对象",
    "keywords": [
      "工厂方法",
      "创建型模式",
      "对象创建",
      "多态"
    ],
    "folder": "DesignPattern"
  },
  "03-抽象工厂模式.md": {
    "summary": "抽象工厂模式提供创建相关对象族的接口",
    "keywords": [
      "抽象工厂",
      "创建型模式",
      "对象族",
      "产品系列"
    ],
    "folder": "DesignPattern"
  },
  "04-建造者模式.md": {
    "summary": "建造者模式用于构建复杂对象，分步骤创建",
    "keywords": [
      "建造者模式",
      "创建型模式",
      "复杂对象",
      "分步构建"
    ],
    "folder": "DesignPattern"
  },
  "05-原型模式.md": {
    "summary": "原型模式通过克隆现有实例来创建新对象",
    "keywords": [
      "原型模式",
      "创建型模式",
      "对象克隆",
      "深拷贝"
    ],
    "folder": "DesignPattern"
  },
  "06-适配器模式.md": {
    "summary": "适配器模式使不兼容的接口能够协同工作",
    "keywords": [
      "适配器模式",
      "结构型模式",
      "接口适配",
      "兼容性"
    ],
    "folder": "DesignPattern"
  },
  "07-桥接模式.md": {
    "summary": "桥接模式将抽象与实现分离，使它们可以独立变化",
    "keywords": [
      "桥接模式",
      "结构型模式",
      "抽象分离",
      "独立变化"
    ],
    "folder": "DesignPattern"
  },
  "08-组合模式.md": {
    "summary": "组合模式将对象组合成树形结构来表示部分-整体层次结构",
    "keywords": [
      "组合模式",
      "结构型模式",
      "树形结构",
      "部分整体"
    ],
    "folder": "DesignPattern"
  },
  "09-装饰模式.md": {
    "summary": "装饰模式动态地给对象添加新功能",
    "keywords": [
      "装饰模式",
      "结构型模式",
      "功能扩展",
      "动态添加"
    ],
    "folder": "DesignPattern"
  },
  "10-外观模式.md": {
    "summary": "外观模式为复杂子系统提供简化的接口",
    "keywords": [
      "外观模式",
      "结构型模式",
      "简化接口",
      "子系统"
    ],
    "folder": "DesignPattern"
  },
  "11-享元模式.md": {
    "summary": "享元模式通过共享技术有效支持大量细粒度对象",
    "keywords": [
      "享元模式",
      "结构型模式",
      "对象共享",
      "内存优化"
    ],
    "folder": "DesignPattern"
  },
  "12-代理模式.md": {
    "summary": "代理模式为其他对象提供代理以控制对它的访问",
    "keywords": [
      "代理模式",
      "结构型模式",
      "访问控制",
      "间接访问"
    ],
    "folder": "DesignPattern"
  },
  "13-职责链模式.md": {
    "summary": "职责链模式将请求沿着处理者链传递直到有对象处理它",
    "keywords": [
      "职责链模式",
      "行为型模式",
      "请求传递",
      "处理链"
    ],
    "folder": "DesignPattern"
  },
  "14-命令模式.md": {
    "summary": "命令模式将请求封装成对象，以便参数化和排队",
    "keywords": [
      "命令模式",
      "行为型模式",
      "请求封装",
      "参数化"
    ],
    "folder": "DesignPattern"
  },
  "15-解释器模式.md": {
    "summary": "解释器模式为语言创建解释器来解释语句",
    "keywords": [
      "解释器模式",
      "行为型模式",
      "语言解释",
      "语法分析"
    ],
    "folder": "DesignPattern"
  },
  "16-迭代器模式.md": {
    "summary": "迭代器模式提供顺序访问聚合对象元素的方法",
    "keywords": [
      "迭代器模式",
      "行为型模式",
      "顺序访问",
      "聚合对象"
    ],
    "folder": "DesignPattern"
  },
  "17-中介模式.md": {
    "summary": "中介模式定义对象间的交互方式，降低耦合度",
    "keywords": [
      "中介模式",
      "行为型模式",
      "对象交互",
      "解耦"
    ],
    "folder": "DesignPattern"
  },
  "18-备忘录模式.md": {
    "summary": "备忘录模式保存对象的内部状态以便后续恢复",
    "keywords": [
      "备忘录模式",
      "行为型模式",
      "状态保存",
      "状态恢复"
    ],
    "folder": "DesignPattern"
  },
  "19-观察者模式.md": {
    "summary": "观察者模式定义对象间一对多的依赖关系",
    "keywords": [
      "观察者模式",
      "行为型模式",
      "一对多",
      "事件通知"
    ],
    "folder": "DesignPattern"
  },
  "20-状态模式.md": {
    "summary": "状态模式允许对象在内部状态改变时改变其行为",
    "keywords": [
      "状态模式",
      "行为型模式",
      "状态改变",
      "行为切换"
    ],
    "folder": "DesignPattern"
  },
  "21-策略模式.md": {
    "summary": "策略模式定义算法族，使它们可以互相替换",
    "keywords": [
      "策略模式",
      "行为型模式",
      "算法族",
      "算法替换"
    ],
    "folder": "DesignPattern"
  },
  "22-模板方法模式.md": {
    "summary": "模板方法模式定义算法骨架，子类实现具体步骤",
    "keywords": [
      "模板方法",
      "行为型模式",
      "算法骨架",
      "步骤实现"
    ],
    "folder": "DesignPattern"
  },
  "23-访问者模式.md": {
    "summary": "访问者模式在不改变元素类的前提下定义新操作",
    "keywords": [
      "访问者模式",
      "行为型模式",
      "操作分离",
      "双重分派"
    ],
    "folder": "DesignPattern"
  },
  "24-依赖注入模式.md": {
    "summary": "依赖注入模式通过外部注入依赖来降低耦合",
    "keywords": [
      "依赖注入",
      "现代模式",
      "控制反转",
      "解耦"
    ],
    "folder": "DesignPattern"
  },
  "25-事件总线模式.md": {
    "summary": "事件总线模式提供发布-订阅机制进行组件通信",
    "keywords": [
      "事件总线",
      "现代模式",
      "发布订阅",
      "组件通信"
    ],
    "folder": "DesignPattern"
  },
  "26-规格模式.md": {
    "summary": "规格模式将业务规则封装成可组合的规格对象",
    "keywords": [
      "规格模式",
      "现代模式",
      "业务规则",
      "规则组合"
    ],
    "folder": "DesignPattern"
  },
  "27-空对象模式.md": {
    "summary": "空对象模式提供默认行为来避免空指针检查",
    "keywords": [
      "空对象模式",
      "现代模式",
      "默认行为",
      "空指针"
    ],
    "folder": "DesignPattern"
  },
  "28-对象池模式.md": {
    "summary": "对象池模式通过重用对象来提高性能",
    "keywords": [
      "对象池模式",
      "现代模式",
      "对象重用",
      "性能优化"
    ],
    "folder": "DesignPattern"
  },
  "29-过滤器模式.md": {
    "summary": "过滤器模式使用不同标准过滤对象集合",
    "keywords": [
      "过滤器模式",
      "现代模式",
      "对象过滤",
      "条件筛选"
    ],
    "folder": "DesignPattern"
  },
  "30-生产者消费者模式.md": {
    "summary": "生产者消费者模式解决生产和消费速度不匹配问题",
    "keywords": [
      "生产者消费者",
      "现代模式",
      "并发控制",
      "缓冲区"
    ],
    "folder": "DesignPattern"
  },
  "0-环境搭建.md": {
    "summary": "MySQL数据库环境搭建完整指南，包含SQL简介、MySQL安装配置、字符编码设置、可视化工具使用等",
    "keywords": [
      "MySQL安装",
      "环境配置",
      "字符编码",
      "可视化工具",
      "服务管理"
    ],
    "folder": "MySQL"
  },
  "1-数据库概念.md": {
    "summary": "数据库基础概念详解，包含关系型与非关系型数据库、DBMS系统、数据库设计原则等核心理论",
    "keywords": [
      "数据库概念",
      "关系型数据库",
      "非关系型数据库",
      "DBMS",
      "数据库设计",
      "范式理论"
    ],
    "folder": "MySQL"
  },
  "2-数据库和表操作.md": {
    "summary": "MySQL数据库和表操作详解，包括SQL语法规则、DDL/DCL/DML/TCL/DQL语言分类，以及数据库和表的创建、修改、删除等基本操作。涵盖SQL注释、数据类型和约束条件的使用。",
    "keywords": [
      "SQL语法",
      "DDL",
      "DML",
      "数据库操作",
      "表操作",
      "数据类型",
      "约束条件"
    ],
    "folder": "MySQL"
  },
  "3-数据操作.md": {
    "summary": "MySQL数据操作详解，包括DML和DQL语言的使用。涵盖数据的插入、更新、删除和查询操作，以及条件查询、模糊查询、去重查询等高级查询技巧。",
    "keywords": [
      "DML",
      "DQL",
      "INSERT",
      "UPDATE",
      "DELETE",
      "SELECT",
      "条件查询",
      "模糊查询"
    ],
    "folder": "MySQL"
  },
  "4-数据库进阶.md": {
    "summary": "MySQL数据库进阶概念，包括数据库三大范式（1NF、2NF、3NF）的详解，视图的创建和使用，以及索引的概念、类型和优缺点分析。",
    "keywords": [
      "三大范式",
      "视图",
      "索引",
      "数据库设计",
      "查询优化",
      "存储结构"
    ],
    "folder": "MySQL"
  },
  "5-JDBC.md": {
    "summary": "JDBC技术详解，包括Java数据库连接的基本概念、核心接口（Connection、Statement、ResultSet）和操作流程。涵盖PreparedStatement的使用和SQL注入攻击的防范。",
    "keywords": [
      "JDBC",
      "Java数据库连接",
      "Connection",
      "Statement",
      "ResultSet",
      "PreparedStatement",
      "SQL注入"
    ],
    "folder": "MySQL"
  },
  "0-前端开发概述.md": {
    "summary": "前端开发基础概述，介绍HTML、CSS、JavaScript三大核心技术及主流浏览器特性",
    "keywords": [
      "前端开发",
      "HTML",
      "CSS",
      "JavaScript",
      "浏览器兼容性"
    ],
    "folder": "FrontEndTrinity"
  },
  "1-文档结构.md": {
    "summary": "HTML文档结构详解，包含DOCTYPE声明、html标签、head和body部分的基本构成",
    "keywords": [
      "HTML文档结构",
      "DOCTYPE",
      "html标签",
      "head标签",
      "body标签"
    ],
    "folder": "FrontEndTrinity"
  },
  "2-常用文本标签.md": {
    "summary": "HTML常用文本标签详解，包含标题、段落、文本格式化、语义化标签等基础文本处理",
    "keywords": [
      "文本标签",
      "标题标签",
      "段落标签",
      "文本格式化",
      "语义化标签"
    ],
    "folder": "FrontEndTrinity"
  },
  "3-超链接和图像.md": {
    "summary": "HTML超链接和图像处理，包含链接类型、图像标签、多媒体元素的使用方法",
    "keywords": [
      "超链接",
      "图像标签",
      "多媒体",
      "链接类型",
      "图像属性"
    ],
    "folder": "FrontEndTrinity"
  },
  "4-列表、表格和表单.md": {
    "summary": "HTML列表、表格和表单元素详解，包含有序列表、无序列表、表格结构、表单控件等",
    "keywords": [
      "列表",
      "表格",
      "表单",
      "表单控件",
      "数据收集"
    ],
    "folder": "FrontEndTrinity"
  },
  "5-HTML5.md": {
    "summary": "HTML5新特性详解，包含语义化标签、多媒体支持、表单增强、Canvas绘图等现代Web技术",
    "keywords": [
      "HTML5",
      "语义化标签",
      "多媒体支持",
      "表单增强",
      "Canvas",
      "现代Web技术"
    ],
    "folder": "FrontEndTrinity"
  },
  "6-CSS概述.md": {
    "summary": "CSS概述文档详细介绍了CSS（层叠样式表）的基础知识。包括CSS的作用（美化网页、布局控制、响应式设计）、三种创建方式（内联样式、内部样式表、外部样式表）及其优先级。讲解了CSS的基本语法结构、选择器和声明的概念，以及开发中的注意事项如代码规范、浏览器兼容性、性能优化等。为前端开发者提供了CSS入门的完整指南。",
    "keywords": [
      "CSS",
      "层叠样式表",
      "样式表",
      "内联样式",
      "内部样式表",
      "外部样式表",
      "选择器",
      "声明",
      "优先级",
      "浏览器兼容性",
      "响应式设计"
    ],
    "folder": "FrontEndTrinity"
  },
  "7-CSS选择器.md": {
    "summary": "CSS选择器是前端开发的核心技能，用于从HTML文档的DOM树中筛选目标元素并绑定样式规则。文档全面介绍了各种选择器类型：基本选择器（通用、标签、类、ID）、关系选择器（并集、交集、后代、子代、兄弟、相邻兄弟）、属性选择器、伪类选择器（结构相关、交互状态、链接状态、表单状态）和伪元素选择器。详细说明了选择器优先级计算规则，并提供了实用技巧和最佳实践。",
    "keywords": [
      "CSS选择器",
      "DOM",
      "基本选择器",
      "关系选择器",
      "属性选择器",
      "伪类选择器",
      "伪元素选择器",
      "选择器优先级",
      "样式规则",
      "前端开发"
    ],
    "folder": "FrontEndTrinity"
  },
  "8-CSS常用属性.md": {
    "summary": "CSS常用属性详解，全面介绍了前端开发中最重要的CSS属性。包括颜色属性（color、background-color、opacity）、字体属性（font-family、font-size、font-weight、font-style）、文本属性（text-align、text-decoration、line-height、letter-spacing）、背景属性（background-image、background-repeat、background-position、background-size）、边框属性（border、border-radius、box-shadow）、尺寸属性（width、height、max-width、min-height）、间距属性（margin、padding）和显示属性（display、visibility、overflow）。每个属性都包含详细的语法说明、取值范围、使用示例和实际应用场景，为前端开发者提供完整的CSS属性参考指南。",
    "keywords": [
      "CSS属性",
      "颜色属性",
      "字体属性",
      "文本属性",
      "背景属性",
      "边框属性",
      "尺寸属性",
      "间距属性",
      "显示属性",
      "样式设计",
      "前端开发"
    ],
    "folder": "FrontEndTrinity"
  },
  "9-CSS元素显示.md": {
    "summary": "CSS元素显示详解，深入介绍了CSS中控制元素显示和变换的核心属性。包括显示分类（display属性的block、inline、inline-block、flex、grid等值）、隐藏元素的多种方式（display:none、visibility:hidden、opacity:0等）及其区别、2D转换功能（transform属性的translate、rotate、scale、skew变换）、CSS3前缀的使用和浏览器兼容性处理。文档提供了丰富的实践示例，展示了各种显示效果和变换动画，帮助开发者掌握现代CSS的显示控制技术，实现复杂的页面布局和交互效果。",
    "keywords": [
      "CSS显示",
      "display属性",
      "元素隐藏",
      "2D转换",
      "transform",
      "CSS3前缀",
      "浏览器兼容性",
      "页面布局",
      "交互效果",
      "前端开发"
    ],
    "folder": "FrontEndTrinity"
  },
  "10-CSS盒子模型.md": {
    "summary": "CSS盒子模型是前端布局的核心概念，详细解析了网页元素的空间结构。文档全面介绍了盒子模型的五大要素：内容区域（content）、内边距（padding）、边框（border）、外边距（margin）和轮廓（outline）。深入讲解了宽度和高度的计算方式、边框的样式设置、轮廓与边框的区别、内外边距的使用技巧、溢出处理（overflow属性）、关键的Box-Sizing属性（content-box vs border-box）。包含丰富的实践示例和常见问题解决方案，如外边距合并、高度塌陷等布局问题的处理方法，为开发者提供完整的盒子模型掌握指南。",
    "keywords": [
      "CSS盒子模型",
      "内容区域",
      "内边距",
      "外边距",
      "边框",
      "轮廓",
      "Box-Sizing",
      "溢出处理",
      "外边距合并",
      "高度塌陷",
      "布局问题",
      "前端开发"
    ],
    "folder": "FrontEndTrinity"
  },
  "11-CSS布局.md": {
    "summary": "CSS布局技术详解，包括浮动布局（Float）、定位布局（Position）和弹性布局（Flex）的原理、属性和实践应用。涵盖浮动清除、定位方式、z-index层叠、Flexbox容器和子元素属性，以及三栏布局、居中布局等实践示例。",
    "keywords": [
      "CSS",
      "布局",
      "浮动",
      "定位",
      "弹性布局",
      "Flexbox",
      "响应式",
      "float",
      "position",
      "z-index",
      "justify-content",
      "align-items",
      "flex-grow",
      "flex-shrink"
    ],
    "folder": "FrontEndTrinity"
  }
}
