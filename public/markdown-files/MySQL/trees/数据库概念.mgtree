概述
  数据库（Database）
    数据存储的仓库，以特定规则在磁盘上存储数据
    关系型数据库
      以表形式存储数据
      采用SQL语言开发
      称为SQL数据库
      MySQL、Oracle、SQL Server、PostgreSQL
      特点
        数据以表格形式存储
        支持ACID事务特性
        使用SQL标准查询语言
        支持复杂查询和连接操作
    非关系型数据库
      称为NoSQL(not only)数据库
      Redis、MongoDB、Cassandra、Neo4j
      分类
        键值存储：Redis、DynamoDB
        文档数据库：MongoDB、CouchDB
        列族数据库：Cassandra、HBase
        图数据库：Neo4j、ArangoDB
      特点
        灵活的数据模型
        水平扩展能力强
        高性能读写
        适合大数据场景
  数据库管理系统（DBMS）
    定义：管理数据库的软件系统
    功能
      数据定义：创建、修改、删除数据库结构
      数据操作：增删改查数据
      数据控制：权限管理、事务控制
      数据维护：备份恢复、性能优化
    常见DBMS
      MySQL：开源、轻量级、高性能
      Oracle：企业级、功能强大、高可靠性
      SQL Server：微软产品、与Windows集成好
      PostgreSQL：开源、功能丰富、标准兼容性好
数据库基本概念
  表（Table）
    数据库中存储数据的基本单位
    由行和列组成的二维结构
    每个表有唯一的表名
  字段（Field/Column）
    表中的列，表示数据的属性
    每个字段有名称、数据类型、约束条件
  记录（Record/Row）
    表中的行，表示一条完整的数据
    由多个字段值组成
  主键（Primary Key）
    唯一标识表中每条记录的字段
    不能为空，不能重复
    一个表只能有一个主键
  外键（Foreign Key）
    引用其他表主键的字段
    用于建立表与表之间的关系
    保证数据的参照完整性
  索引（Index）
    提高查询效率的数据结构
    类似书籍的目录
    可以加快数据检索速度
数据库设计原则
  范式理论
    第一范式（1NF）：字段不可再分
    第二范式（2NF）：消除部分依赖
    第三范式（3NF）：消除传递依赖
    BCNF范式：消除主属性对候选键的部分依赖
  设计步骤
    需求分析：明确业务需求和数据需求
    概念设计：建立E-R模型
    逻辑设计：转换为关系模型
    物理设计：确定存储结构和访问方法
  设计原则
    数据完整性：确保数据准确性和一致性
    数据冗余最小化：避免不必要的重复数据
    性能优化：合理设计索引和查询
    可扩展性：考虑未来业务发展需求
